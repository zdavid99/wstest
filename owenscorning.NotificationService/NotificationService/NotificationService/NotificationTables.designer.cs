#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OwensCorning.NotificationService
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="OC_NotificationService")]
	public partial class NotificationTablesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSentInfo(SentInfo instance);
    partial void UpdateSentInfo(SentInfo instance);
    partial void DeleteSentInfo(SentInfo instance);
    partial void InsertSubscription(Subscription instance);
    partial void UpdateSubscription(Subscription instance);
    partial void DeleteSubscription(Subscription instance);
    partial void InsertUpdatedDocument(UpdatedDocument instance);
    partial void UpdateUpdatedDocument(UpdatedDocument instance);
    partial void DeleteUpdatedDocument(UpdatedDocument instance);
    partial void InsertBatch(Batch instance);
    partial void UpdateBatch(Batch instance);
    partial void DeleteBatch(Batch instance);
    #endregion
		
		public NotificationTablesDataContext() : 
				base(global::OwensCorning.NotificationService.Properties.Settings.Default.OC_NotificationServiceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NotificationTablesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NotificationTablesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NotificationTablesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NotificationTablesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SentInfo> SentInfos
		{
			get
			{
				return this.GetTable<SentInfo>();
			}
		}
		
		public System.Data.Linq.Table<Subscription> Subscriptions
		{
			get
			{
				return this.GetTable<Subscription>();
			}
		}
		
		public System.Data.Linq.Table<UpdatedDocument> UpdatedDocuments
		{
			get
			{
				return this.GetTable<UpdatedDocument>();
			}
		}
		
		public System.Data.Linq.Table<Batch> Batches
		{
			get
			{
				return this.GetTable<Batch>();
			}
		}
		
		public System.Data.Linq.Table<SiteConfiguration> SiteConfigurations
		{
			get
			{
				return this.GetTable<SiteConfiguration>();
			}
		}
	}
	
	[Table(Name="dbo.SentInfo")]
	public partial class SentInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _batchId;
		
		private string _subscriptionEmail;
		
		private string _site;
		
		private System.Nullable<System.DateTime> _lastSendDate;
		
		private string _status;
		
		private EntityRef<Subscription> _Subscription;
		
		private EntityRef<Batch> _Batch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbatchIdChanging(int value);
    partial void OnbatchIdChanged();
    partial void OnsubscriptionEmailChanging(string value);
    partial void OnsubscriptionEmailChanged();
    partial void OnsiteChanging(string value);
    partial void OnsiteChanged();
    partial void OnlastSendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastSendDateChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public SentInfo()
		{
			this._Subscription = default(EntityRef<Subscription>);
			this._Batch = default(EntityRef<Batch>);
			OnCreated();
		}
		
		[Column(Storage="_batchId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int batchId
		{
			get
			{
				return this._batchId;
			}
			set
			{
				if ((this._batchId != value))
				{
					if (this._Batch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbatchIdChanging(value);
					this.SendPropertyChanging();
					this._batchId = value;
					this.SendPropertyChanged("batchId");
					this.OnbatchIdChanged();
				}
			}
		}
		
		[Column(Storage="_subscriptionEmail", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string subscriptionEmail
		{
			get
			{
				return this._subscriptionEmail;
			}
			set
			{
				if ((this._subscriptionEmail != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubscriptionEmailChanging(value);
					this.SendPropertyChanging();
					this._subscriptionEmail = value;
					this.SendPropertyChanged("subscriptionEmail");
					this.OnsubscriptionEmailChanged();
				}
			}
		}
		
		[Column(Storage="_site", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string site
		{
			get
			{
				return this._site;
			}
			set
			{
				if ((this._site != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsiteChanging(value);
					this.SendPropertyChanging();
					this._site = value;
					this.SendPropertyChanged("site");
					this.OnsiteChanged();
				}
			}
		}
		
		[Column(Storage="_lastSendDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastSendDate
		{
			get
			{
				return this._lastSendDate;
			}
			set
			{
				if ((this._lastSendDate != value))
				{
					this.OnlastSendDateChanging(value);
					this.SendPropertyChanging();
					this._lastSendDate = value;
					this.SendPropertyChanged("lastSendDate");
					this.OnlastSendDateChanged();
				}
			}
		}
		
		[Column(Storage="_status", DbType="VarChar(20)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[Association(Name="Subscription_SentInfo", Storage="_Subscription", ThisKey="subscriptionEmail,site", IsForeignKey=true)]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.SentInfos.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.SentInfos.Add(this);
						this._subscriptionEmail = value.email;
						this._site = value.site;
					}
					else
					{
						this._subscriptionEmail = default(string);
						this._site = default(string);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		[Association(Name="Batch_SentInfo", Storage="_Batch", ThisKey="batchId", IsForeignKey=true)]
		public Batch Batch
		{
			get
			{
				return this._Batch.Entity;
			}
			set
			{
				Batch previousValue = this._Batch.Entity;
				if (((previousValue != value) 
							|| (this._Batch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Batch.Entity = null;
						previousValue.SentInfos.Remove(this);
					}
					this._Batch.Entity = value;
					if ((value != null))
					{
						value.SentInfos.Add(this);
						this._batchId = value.batchId;
					}
					else
					{
						this._batchId = default(int);
					}
					this.SendPropertyChanged("Batch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Subscription")]
	public partial class Subscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _email;
		
		private string _site;
		
		private string _firstName;
		
		private string _lastName;
		
		private bool _optedIn;
		
		private EntitySet<SentInfo> _SentInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnsiteChanging(string value);
    partial void OnsiteChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnoptedInChanging(bool value);
    partial void OnoptedInChanged();
    #endregion
		
		public Subscription()
		{
			this._SentInfos = new EntitySet<SentInfo>(new Action<SentInfo>(this.attach_SentInfos), new Action<SentInfo>(this.detach_SentInfos));
			OnCreated();
		}
		
		[Column(Storage="_email", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Column(Storage="_site", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string site
		{
			get
			{
				return this._site;
			}
			set
			{
				if ((this._site != value))
				{
					this.OnsiteChanging(value);
					this.SendPropertyChanging();
					this._site = value;
					this.SendPropertyChanged("site");
					this.OnsiteChanged();
				}
			}
		}
		
		[Column(Storage="_firstName", DbType="VarChar(100)")]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_lastName", DbType="VarChar(100)")]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[Column(Storage="_optedIn", DbType="Bit NOT NULL")]
		public bool optedIn
		{
			get
			{
				return this._optedIn;
			}
			set
			{
				if ((this._optedIn != value))
				{
					this.OnoptedInChanging(value);
					this.SendPropertyChanging();
					this._optedIn = value;
					this.SendPropertyChanged("optedIn");
					this.OnoptedInChanged();
				}
			}
		}
		
		[Association(Name="Subscription_SentInfo", Storage="_SentInfos", OtherKey="subscriptionEmail,site")]
		public EntitySet<SentInfo> SentInfos
		{
			get
			{
				return this._SentInfos;
			}
			set
			{
				this._SentInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SentInfos(SentInfo entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_SentInfos(SentInfo entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
	}
	
	[Table(Name="dbo.UpdatedDocuments")]
	public partial class UpdatedDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk_id;
		
		private string _documentName;
		
		private string _url;
		
		private System.Nullable<System.DateTime> _dateUpdated;
		
		private string _fileSize;
		
		private string _documentType;
		
		private System.Nullable<int> _batch;
		
		private EntityRef<Batch> _Batch1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpk_idChanging(int value);
    partial void Onpk_idChanged();
    partial void OndocumentNameChanging(string value);
    partial void OndocumentNameChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OndateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OndateUpdatedChanged();
    partial void OnfileSizeChanging(string value);
    partial void OnfileSizeChanged();
    partial void OndocumentTypeChanging(string value);
    partial void OndocumentTypeChanged();
    partial void OnbatchChanging(System.Nullable<int> value);
    partial void OnbatchChanged();
    #endregion
		
		public UpdatedDocument()
		{
			this._Batch1 = default(EntityRef<Batch>);
			OnCreated();
		}
		
		[Column(Storage="_pk_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pk_id
		{
			get
			{
				return this._pk_id;
			}
			set
			{
				if ((this._pk_id != value))
				{
					this.Onpk_idChanging(value);
					this.SendPropertyChanging();
					this._pk_id = value;
					this.SendPropertyChanged("pk_id");
					this.Onpk_idChanged();
				}
			}
		}
		
		[Column(Storage="_documentName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string documentName
		{
			get
			{
				return this._documentName;
			}
			set
			{
				if ((this._documentName != value))
				{
					this.OndocumentNameChanging(value);
					this.SendPropertyChanging();
					this._documentName = value;
					this.SendPropertyChanged("documentName");
					this.OndocumentNameChanged();
				}
			}
		}
		
		[Column(Storage="_url", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[Column(Storage="_dateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateUpdated
		{
			get
			{
				return this._dateUpdated;
			}
			set
			{
				if ((this._dateUpdated != value))
				{
					this.OndateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._dateUpdated = value;
					this.SendPropertyChanged("dateUpdated");
					this.OndateUpdatedChanged();
				}
			}
		}
		
		[Column(Storage="_fileSize", DbType="VarChar(20)")]
		public string fileSize
		{
			get
			{
				return this._fileSize;
			}
			set
			{
				if ((this._fileSize != value))
				{
					this.OnfileSizeChanging(value);
					this.SendPropertyChanging();
					this._fileSize = value;
					this.SendPropertyChanged("fileSize");
					this.OnfileSizeChanged();
				}
			}
		}
		
		[Column(Storage="_documentType", DbType="VarChar(50)")]
		public string documentType
		{
			get
			{
				return this._documentType;
			}
			set
			{
				if ((this._documentType != value))
				{
					this.OndocumentTypeChanging(value);
					this.SendPropertyChanging();
					this._documentType = value;
					this.SendPropertyChanged("documentType");
					this.OndocumentTypeChanged();
				}
			}
		}
		
		[Column(Storage="_batch", DbType="Int")]
		public System.Nullable<int> batch
		{
			get
			{
				return this._batch;
			}
			set
			{
				if ((this._batch != value))
				{
					if (this._Batch1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbatchChanging(value);
					this.SendPropertyChanging();
					this._batch = value;
					this.SendPropertyChanged("batch");
					this.OnbatchChanged();
				}
			}
		}
		
		[Association(Name="Batch_UpdatedDocument", Storage="_Batch1", ThisKey="batch", IsForeignKey=true)]
		public Batch Batch1
		{
			get
			{
				return this._Batch1.Entity;
			}
			set
			{
				Batch previousValue = this._Batch1.Entity;
				if (((previousValue != value) 
							|| (this._Batch1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Batch1.Entity = null;
						previousValue.UpdatedDocuments.Remove(this);
					}
					this._Batch1.Entity = value;
					if ((value != null))
					{
						value.UpdatedDocuments.Add(this);
						this._batch = value.batchId;
					}
					else
					{
						this._batch = default(Nullable<int>);
					}
					this.SendPropertyChanged("Batch1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Batch")]
	public partial class Batch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _batchId;
		
		private string _site;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private System.Nullable<System.DateTime> _finishDate;
		
		private string _status;
		
		private EntitySet<SentInfo> _SentInfos;
		
		private EntitySet<UpdatedDocument> _UpdatedDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbatchIdChanging(int value);
    partial void OnbatchIdChanged();
    partial void OnsiteChanging(string value);
    partial void OnsiteChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnfinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnfinishDateChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public Batch()
		{
			this._SentInfos = new EntitySet<SentInfo>(new Action<SentInfo>(this.attach_SentInfos), new Action<SentInfo>(this.detach_SentInfos));
			this._UpdatedDocuments = new EntitySet<UpdatedDocument>(new Action<UpdatedDocument>(this.attach_UpdatedDocuments), new Action<UpdatedDocument>(this.detach_UpdatedDocuments));
			OnCreated();
		}
		
		[Column(Storage="_batchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int batchId
		{
			get
			{
				return this._batchId;
			}
			set
			{
				if ((this._batchId != value))
				{
					this.OnbatchIdChanging(value);
					this.SendPropertyChanging();
					this._batchId = value;
					this.SendPropertyChanged("batchId");
					this.OnbatchIdChanged();
				}
			}
		}
		
		[Column(Storage="_site", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string site
		{
			get
			{
				return this._site;
			}
			set
			{
				if ((this._site != value))
				{
					this.OnsiteChanging(value);
					this.SendPropertyChanging();
					this._site = value;
					this.SendPropertyChanged("site");
					this.OnsiteChanged();
				}
			}
		}
		
		[Column(Storage="_startDate", DbType="DateTime NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[Column(Storage="_endDate", DbType="DateTime NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[Column(Storage="_finishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> finishDate
		{
			get
			{
				return this._finishDate;
			}
			set
			{
				if ((this._finishDate != value))
				{
					this.OnfinishDateChanging(value);
					this.SendPropertyChanging();
					this._finishDate = value;
					this.SendPropertyChanged("finishDate");
					this.OnfinishDateChanged();
				}
			}
		}
		
		[Column(Storage="_status", DbType="VarChar(20)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[Association(Name="Batch_SentInfo", Storage="_SentInfos", OtherKey="batchId")]
		public EntitySet<SentInfo> SentInfos
		{
			get
			{
				return this._SentInfos;
			}
			set
			{
				this._SentInfos.Assign(value);
			}
		}
		
		[Association(Name="Batch_UpdatedDocument", Storage="_UpdatedDocuments", OtherKey="batch")]
		public EntitySet<UpdatedDocument> UpdatedDocuments
		{
			get
			{
				return this._UpdatedDocuments;
			}
			set
			{
				this._UpdatedDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SentInfos(SentInfo entity)
		{
			this.SendPropertyChanging();
			entity.Batch = this;
		}
		
		private void detach_SentInfos(SentInfo entity)
		{
			this.SendPropertyChanging();
			entity.Batch = null;
		}
		
		private void attach_UpdatedDocuments(UpdatedDocument entity)
		{
			this.SendPropertyChanging();
			entity.Batch1 = this;
		}
		
		private void detach_UpdatedDocuments(UpdatedDocument entity)
		{
			this.SendPropertyChanging();
			entity.Batch1 = null;
		}
	}
	
	[Table(Name="dbo.SiteConfiguration")]
	public partial class SiteConfiguration
	{
		
		private string _site;
		
		private string _siteName;
		
		private string _emailTemplateURL;
		
		private string _taxonomyName;
		
		public SiteConfiguration()
		{
		}
		
		[Column(Storage="_site", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string site
		{
			get
			{
				return this._site;
			}
			set
			{
				if ((this._site != value))
				{
					this._site = value;
				}
			}
		}
		
		[Column(Storage="_siteName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string siteName
		{
			get
			{
				return this._siteName;
			}
			set
			{
				if ((this._siteName != value))
				{
					this._siteName = value;
				}
			}
		}
		
		[Column(Storage="_emailTemplateURL", DbType="VarChar(255)")]
		public string emailTemplateURL
		{
			get
			{
				return this._emailTemplateURL;
			}
			set
			{
				if ((this._emailTemplateURL != value))
				{
					this._emailTemplateURL = value;
				}
			}
		}
		
		[Column(Storage="_taxonomyName", DbType="VarChar(255)")]
		public string taxonomyName
		{
			get
			{
				return this._taxonomyName;
			}
			set
			{
				if ((this._taxonomyName != value))
				{
					this._taxonomyName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
